type User {
  id: ID @id
  username: String!
  firstname: String
  lastname: String
  email: String!
  password: String! @private
  createdAt: DateTime
    @timestamp(operations: [CREATE])
  updatedAt: DateTime
    @timestamp(operations: [CREATE, UPDATE])
  projects: [Project!]!
    @relationship(type: "CONTRIBUTES", properties: "Contributes", direction: OUT)
  tasks: [Task!]!
    @relationship(type: "CONTRIBUTES", properties: "Contributes", direction: OUT)
  invitations: [Invitation!]!
    @relationship(type: "FOR_USER", direction: IN)
}

extend type User @auth(
  rules: [
    {
      operations: [UPDATE, DELETE]
      where: {
        id: "$jwt.sub"
      }
    }
  ]
)

enum UserRole {
  OWNER,
  MODERATOR,
  CONTRIBUTOR,
  GUEST
}

interface Contributes @relationshipProperties {
  as: UserRole
  since: DateTime!
    @timestamp(operations: [CREATE])
}

type UserResponse @exclude {
  status: String!
  data: UserResponseData
}

type AuthenticationResponse @exclude {
  status: String!
  data: String # JWT
}

type UserResponseData @exclude {
  id: ID!
  username: String!
  firstname: String!
  lastname: String!
  email: String!
  createdAt: DateTime
  updatedAt: DateTime
}

type Mutation {
  createUser(
    username: String!
    firstname: String
    lastname: String
    email: String!
    password: String!
  ): UserResponse

  updateUser(
    username: String
    firstname: String
    lastname: String
    email: String
    password: String
  ): UserResponse

  auth(email: String!, password: String!): AuthenticationResponse
  projectAuth(id: ID!): AuthenticationResponse
}
