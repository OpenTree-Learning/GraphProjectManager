type Project {
  id: ID @id
  name: String!
  description: String
  createdAt: DateTime!
    @timestamp(operations: [CREATE])
  contributors: [User!]!
    @relationship(type: "CONTRIBUTES", properties: "Contributes", direction: IN)
  tasks: [Task!]! 
    @relationship(type: "DEPENDS_ON", direction: OUT)
  role: UserRole!
    @cypher(statement: """
      MATCH (:User {id: $auth.jwt.sub})-[r:CONTRIBUTES]->(this)
      RETURN r.as AS role
    """)
}

extend type Project @auth(
  rules: [
    {
      operations: [READ, UPDATE, DELETE, CONNECT, DISCONNECT],
      roles: ["OWNER"]
    }
    {
      operations: [READ, CONNECT, DISCONNECT],
      roles: ["MODERATOR", "CONTRIBUTOR"]
    }
    {
      operations: [READ],
      roles: ["GUEST"]
    }
    {
      operations: [READ],
      where: {
        contributors: {
          id: "$jwt.sub"
        }
      }
    }
  ]
)

type ProjectResponseData @exclude {
  id: ID!
  name: String!
  description: String!
  createdAt: DateTime!
}

type ProjectResponse @exclude {
  status: String!
  data: ProjectResponseData!
}

type Mutation {
  createProject(
    name: String!
    description: String!
  ): ProjectResponse
}
