enum PriorityOrder {
  LOW,
  NORMAL,
  HIGH,
  URGENT
}

enum State {
  TODO,
  DOING,
  DONE
}

type Task {
  id: ID @id
  name: String!
  description: String
  createdAt: DateTime!
    @timestamp(operations: [CREATE])
  updatedAt: DateTime!
    @timestamp(operations: [CREATE, UPDATE])
  updatedBy: String
  duration: Duration
  labels: [String]
  priorityOrder: PriorityOrder
  state: State
  oldState: State
  primitives: [Task!]! 
    @relationship(type: "DEPENDS_ON", direction: OUT)
  assignedUsers: [User!]!
    @relationship(type: "CONTRIBUTES", properties: "Contributes", direction: IN)
  rootProject: Project!
    @cypher(statement: """
      MATCH (p:Project)-[:DEPENDS_ON*]->(this)
      RETURN p
    """)
}

#extend type Task @auth(
#  rules: [
#    {
#      operations: [READ],
#      where: {
#        assignedUsers: {
#          id: "$jwt.sub"
#        }
#      }
#    },
#    {
#      operations: [CREATE, READ, UPDATE, DELETE, CONNECT, DISCONNECT],
#      roles: ["OWNER", "MODERATOR"]
#    }
#    {
#      operations: [READ, CONNECT, DISCONNECT],
#      roles: ["CONTRIBUTOR"]
#    }
#    {
#      operations: [READ],
#      roles: ["GUEST"]
#    }
#  ]
#)

type CommitResponse {
  status: String,
  data: Task
}

type Mutation {
  commit(
    taskId: ID,
    state: State
  ): CommitResponse
}
